# Copyright (c) 2010-2011 OpenStack, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import logging
import json
from lxml import etree

from keystone.logic.types import fault

LOG = logging.getLogger('keystone.logic.service')
LOG.info('entering Bill_Unit')
class Bill_Unit(object):
    """class for holding bill unit details!"""

    def __init__(self,id=None, vcpu=None, ram=None,
            vdisk=None, enabled=None):
        self.id = id
        self.vcpu = vcpu
        self.ram = ram
        self.vdisk = vdisk
        self.enabled = enabled and True or False


    @staticmethod
    def from_xml(xml_str):
        try:
            dom = etree.Element("root")
            dom.append(etree.fromstring(xml_str))
            root = dom.find("{http://docs.openstack.org/identity/api/v2.0}" \
                            "biller")
            if root == None:
                raise fault.BadRequestFault("Expecting Bill_Unit")
            vcpu = root.get("vcpu")
            ram = root.get("ram")
            vdisk = root.get("vdisk")
            enabled = root.get("enabled")
            if not vcpu:
                raise fault.BadRequestFault("Expecting Bill_Unit")
            elif not vdisk:
                raise fault.BadRequestFault("Expecting Bill_Unit vdisk")
            enabled = enabled is None or enabled.lower() in ["true", "yes"]
            LOG.info('keystone logic biller py from_xml dom id:%d vcpu:%d ram:%d vdisk:%d enabled:%d'% ( id, vcpu, ram, vdisk, enabled))
            return Bill_Unit( id, vcpu, ram, vdisk, enabled)
        except etree.LxmlError as e:
            raise fault.BadRequestFault("Cannot parse Bill_Unit", str(e))




    @staticmethod
    def from_json(json_str):
    	LOG.info('keystone logic types biller py from_json before try') 
        try:
            obj = json.loads(json_str)
            if not "biller" in obj:
                raise fault.BadRequestFault("Expecting Bill_Unit")
            biller = obj["biller"]
            id = biller.get('id', None)
            vcpu = biller.get('vcpu', None)
            LOG.info('keystone logic biller py from_json  id:%s vcpu:%s '% ( id, vcpu))
            LOG.info('keystone lllogic types biller py from_json before IF id') 
            LOG.info('keystone logic biller py from_json  id:%d vcpu:%d '% ( id, vcpu))
            if(vcpu == None or len(vcpu) == 0):
                raise fault.BadRequestFault("Expecting Bill_Unit")
            LOG.info('keystone logic types biller py from_json before ram') 
            LOG.info('keystone logic biller py from_json  id:%d vcpu:%d '% ( id, vcpu))
            if "ram" in biller:
                ram = biller["ram"]
            else:
                ram = None
                
            LOG.info('keystone logic types biller py from_json before Vdisk') 
            LOG.info('keystone logic biller py from_json  id:%d vcpu:%d ram:%d' %(id, vcpu, ram))
            if "vdisk" not in biller:
                raise fault.BadRequestFault("Expecting Bill_Unit vdisk")
            vdisk = biller["vdisk"]
            LOG.info('keystone logic types biller py from_json before ') 
            LOG.info('keystone logic biller py from_json  id:%d vcpu:%d ram:%d vdisk:%d'% ( id, vcpu, ram, vdisk))
            if "enabled" in biller:
                set_enabled = biller["enabled"]
                if not isinstance(set_enabled, bool):
                    raise fault.BadRequestFault("Bad enabled attribute!")
            else:
                set_enabled = True
            LOG.info('keystone logic biller py from_json  id:%d vcpu:%d ram:%d vdisk:%d enabled:%d'% ( id, vcpu, ram, vdisk, set_enabled))
            return Bill_Unit( id, vcpu, ram, vdisk, set_enabled)
        except (ValueError, TypeError) as e:
            raise fault.BadRequestFault("Cannot parse Tenant", str(e))

    def to_dom(self):
        dom = etree.Element("biller",
                        xmlns="http://docs.openstack.org/identity/api/v2.0")
        if self.vdisk:
            dom.set("vdisk", unicode(self.vdisk))
        if self.ram:
            dom.set("ram", unicode(self.ram))
        if self.id:
            dom.set("id", unicode(self.id))
        if self.vcpu:
            dom.set("vcpu", unicode(self.vcpu))
        if self.enabled:
            dom.set("enabled", unicode(self.enabled).lower())
        return dom

    def to_xml(self):
        return etree.tostring(self.to_dom())

    def to_dict(self):
        biller = {}
        if self.id:
           biller["id"] = unicode(self.id)
        if self.vcpu:
           biller["vcpu"] = unicode(self.vcpu)
        if self.ram:
           biller["ram"] = unicode(self.ram)
        biller["vdisk"] = unicode(self.vdisk)
        biller["enabled"] = self.enabled
        return {'biller':biller}
  
    def to_json(self):
        return json.dumps(self.to_dict())

